{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "com.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "datatable",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// verify 'list of maps' to datatable conversion",
                    "[ [a:1, b:3], [a:4, c:5] ]",
                    "// expected output is a datatable"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 105
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codefZlNFL",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// verify primitive type map to datatable conversion",
                    "[a:1, b:2, c: 55]",
                    "// expected output is a datatable"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 68
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeSWnl9a",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// verify non-primitive type map to datatable conversion",
                    "[a:1, b:2, c: new Plot()]",
                    "// expected output is a JSON text"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 89
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeMwBwGY",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// verify primitive type matrix to datatable conversion",
                    "[[1,2,3],[4,5,6], [7,8,9,10]]",
                    "// expected output is a datatable"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 87
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeFlU3F1",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// verify non primitive type matrix to datatable conversion",
                    "[[1,2,3],[4,5,6], [7,8,9,new Plot()]]",
                    "// expected output is a JSON text"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 71
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeC5170V",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// verify basic plots",
                    "new Plot()",
                    "// expected output is a plot"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Plot",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 61
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "code6cxIZX",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// basic collection",
                    "[1,2,3,4,5,6]",
                    "// expected output is the same text"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 61
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codepZM8Jo",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test storing list of maps in beaker namespace",
                    "beaker.x = [ [a:1, b:3], [a:4, c:5] ]",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.x.getClass().getName().endsWith(\".ArrayList\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()",
                    "else",
                    "  \"OK\""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 617
            },
            "evaluatorReader": true,
            "lineCount": 9
        },
        {
            "id": "codeZVB2HL",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test storing basic maps in beaker namespace",
                    "beaker.x = [a:1, b:2, c: 55]",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.x.getClass().getName().endsWith(\".HashMap\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()",
                    "else",
                    "  \"OK\""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 647
            },
            "evaluatorReader": true,
            "lineCount": 9
        },
        {
            "id": "codeIMTwpz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "",
                    "// test storing primitive type matrix in beaker namespace",
                    "beaker.x = [[1,2,3],[4,5,6], [7,8,9,10]]",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.x.getClass().getName().endsWith(\".ArrayList\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()",
                    "else",
                    "  \"OK\"",
                    ""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 592
            },
            "evaluatorReader": true,
            "lineCount": 11
        },
        {
            "id": "code6KOVvS",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test storing Plots in beaker namespace",
                    "beaker.x = new Plot()",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.x.getClass().getName().endsWith(\".HashMap\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()",
                    "else",
                    "  \"OK\""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 581
            },
            "evaluatorReader": true,
            "lineCount": 9
        },
        {
            "id": "codeQ3BFZl",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test storing basic collections in beaker namespace",
                    "beaker.x = [1,2,3,4,5,6]",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.x.getClass().getName().endsWith(\".ArrayList\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()",
                    "else",
                    "  \"OK\""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 585
            },
            "evaluatorReader": true,
            "lineCount": 9
        },
        {
            "id": "codehkAnKs",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test output container",
                    "import com.twosigma.beaker.jvm.object.OutputContainer",
                    "def o = new OutputContainer(['pippero', [1,2,3,4,5,6], [ [a:1, b:3], [a:4, c:5] ]])",
                    "o",
                    "// expected output is a container with 3 parts"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "OutputContainer",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 68
            },
            "evaluatorReader": true,
            "lineCount": 5
        },
        {
            "id": "codewxs5DG",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test storing OutputContainer in beaker namespace",
                    "import com.twosigma.beaker.jvm.object.OutputContainer",
                    "def o = new OutputContainer(['pippero', [1,2,3,4,5,6], [ [a:1, b:3], [a:4, c:5] ]])",
                    "beaker.x = o",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.x.getClass().getName().endsWith(\".OutputContainer\") ||",
                    "  !beaker.x.items[0].getClass().getName().endsWith(\".String\")  ||",
                    "  !beaker.x.items[1].getClass().getName().endsWith(\".ArrayList\")  ||",
                    "  !beaker.x.items[2].getClass().getName().endsWith(\".ArrayList\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()+\" \"+beaker.x.items[0].getClass().getName()+\" \"+beaker.x.items[1].getClass().getName()+\" \"+beaker.x.items[2].getClass().getName()",
                    "else {",
                    "  \"OK\"",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 604
            },
            "evaluatorReader": true,
            "lineCount": 15
        },
        {
            "id": "codeCgw2fr",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test UpdatableEvaluationResult for delayed update",
                    "import com.twosigma.beaker.jvm.object.UpdatableEvaluationResult",
                    "r = new UpdatableEvaluationResult('test 1')",
                    "r",
                    "// before evaluating the next cell this should read \"test 1\""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 70
            },
            "evaluatorReader": true,
            "lineCount": 5
        },
        {
            "id": "codeIFMQnC",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test UpdatableEvaluationResult for delayed update",
                    "sleep(2)",
                    "r.setValue([ [a:1, b:3], [a:4, c:5] ])",
                    "// the above cell now should contain a datatable"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 53
            },
            "evaluatorReader": true,
            "lineCount": 4
        },
        {
            "id": "image",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test creating an image",
                    "import java.awt.image.BufferedImage",
                    "BufferedImage i = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB)",
                    "g2 = i.createGraphics()",
                    "g2.drawLine(0,0,100,100)",
                    "i",
                    "// expected output is a black rectangle with a white diagonal"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Image",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 84
            },
            "evaluatorReader": true,
            "lineCount": 7
        },
        {
            "id": "codeA8clMj",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// test creating an image and saving it in the beaker namespace",
                    "import java.awt.image.BufferedImage",
                    "BufferedImage i = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB)",
                    "g2 = i.createGraphics()",
                    "g2.drawLine(0,0,100,100)",
                    "beaker.i = i",
                    "",
                    "sleep(1)",
                    "",
                    "if(!beaker.i.getClass().getName().endsWith(\".BufferedImage\"))",
                    "  \"ERROR: this test is failed: \"+beaker.x.getClass().getName()",
                    "else",
                    "  \"OK\"",
                    ""
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 101
            },
            "evaluatorReader": true,
            "lineCount": 14
        },
        {
            "id": "codeBaJyH9",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// this should display both the image and a datatable",
                    "import com.twosigma.beaker.jvm.object.OutputContainer",
                    "def a = beaker.getCodeCells('image').output[0]",
                    "def b = beaker.getCodeCells('datatable').output[0]",
                    "import com.twosigma.beaker.jvm.object.OutputContainer",
                    "new OutputContainer([a, b])",
                    "// expected output is a container with an image and a datatable"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "OutputContainer",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 583
            },
            "evaluatorReader": true,
            "lineCount": 7
        },
        {
            "id": "codeLr88WY",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "// check that JavaScript can properly return objects from beaker namespace",
                    "beaker.i",
                    "// below you should see the image"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Image",
                "pluginName": "JavaScript",
                "elapsedTime": 12
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codejZuiR5",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// now evaluate objects in javascript from groovy",
                    "beaker.evaluateCode('JavaScript', 'var o={a:1, b:2}; o')",
                    "// you should see a datatable"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Table",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 673
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codefqZ7Ym",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// now evaluate javascript with errors from groovy",
                    "beaker.evaluateCode('JavaScript', 'var o={a:1, b:2; o')",
                    "// you should see the error details"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "BeakerDisplay",
                "pluginName": "Groovy",
                "shellId": "3834c15d-cf7f-4095-897b-b357ec1c1f34",
                "elapsedTime": 636
            },
            "evaluatorReader": true,
            "lineCount": 3
        }
    ],
    "namespace": {
        "x": {
            "type": "OutputContainer",
            "items": [
                "pippero",
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ],
                {
                    "type": "TableDisplay",
                    "columnNames": [
                        "a",
                        "b",
                        "c"
                    ],
                    "values": [
                        [
                            1,
                            3,
                            null
                        ],
                        [
                            4,
                            null,
                            5
                        ]
                    ],
                    "types": [
                        "integer",
                        "integer",
                        "integer"
                    ],
                    "subtype": "ListOfMaps"
                }
            ]
        },
        "r": {
            "update_id": "5689ad70-16c3-424b-9461-ac2db5330a22",
            "type": "UpdatableEvaluationResult",
            "payload": "test 1"
        },
        "i": {
            "type": "ImageIcon",
            "imageData": "iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAIAAAD/gAIDAAAAkElEQVR42u3QMQEAAAwCIPuXdhX89kAE0jbsfPny5cuXL3z58uXLly98+fLlyxe+fPny5csXvnz58uXLly9fvnz58oUvX758+fKFL1++fPnCly9fvnz5wpcvX758+cKXL1++fOHLly9fvnzhy5cvX77w5cuXL1++8OXLly9fvvDly5cvX/jy5cuXL1/48vX6dU54KuTluc2vAAAAAElFTkSuQmCC",
            "width": 100,
            "height": 100
        }
    }
}
